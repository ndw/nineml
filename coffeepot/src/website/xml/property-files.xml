<appendix xmlns="http://docbook.org/ns/docbook"
          xmlns:xi='http://www.w3.org/2001/XInclude'
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xml:id="property-files"
          version="5.2">
<title>Property files</title>
<subtitle>A worked example</subtitle>

<para>Introduction…</para>

<section xml:id="pf001">
<title>A first attempt</title>

<para>Suppose that we wanted to read Java-style property files, like this one:</para>

<programlisting
    ><xi:include href="examples/example1.properties"
                 parse="text"/></programlisting>

<para>Where:</para>

<orderedlist>
<listitem><para>Lines consist of name/value pairs, separated by “:” or
“=”; whitespace around the separator is irrelevant.</para>
</listitem>
<listitem>
<para>If the first non-whitespace character in a line is “!” or “#”,
it is a comment.</para>
</listitem>
</orderedlist>

<para>Our first attempt to parse this grammar might look something like
<link xlink:href="examples/prop1.ixml">prop1.ixml</link>:</para>

<programlistingco>
  <areaspec>
    <area xml:id="p1l1" coords="1 50"/>
    <area xml:id="p1l2" coords="2 50"/>
    <area xml:id="p1l4" coords="4 50"/>
    <area xml:id="p1l5" coords="5 50"/>
    <area xml:id="p1l7" coords="7 50"/>
  </areaspec>
  <programlisting
    ><xi:include href="examples/prop1.ixml"
                 parse="text"/></programlisting>
  <calloutlist>
    <callout arearefs="p1l1">
      <para>This grammar says, roughly: a property file consists of one or more lines.
      </para>
    </callout>
    <callout arearefs="p1l2">
      <para>A line is either a comment or a <code>name-value</code>.
      </para>
    </callout>
    <callout arearefs="p1l4">
      <para>A comment is whitespace followed by a “#” or a “!”, followed by any characters
up to the end of the line.
      </para>
    </callout>
    <callout arearefs="p1l5">
      <para>A <code>name-value</code> is any character up to the end of the line. (This
is clearly a toy definition that we’ll be refining.)
      </para>
    </callout>
    <callout arearefs="p1l7">
      <para>A <code>NL</code> is either a linefeed or a carriage return followed by a linefeed.
A <code>char</code> is anything except a linefeed. And <code>s</code>, whitespace, is any
sequence of zero or more <link xlink:href="https://www.fileformat.info/info/unicode/category/Zs/list.htm">space separators</link>, tabs, or carriage returns.
      </para>
    </callout>
  </calloutlist>
</programlistingco>

<para>Judicious use of “-” characters before terminals and
non-terminals keeps the output clean. If you run this through
<application>coffeepot</application>, you’ll get:</para>

<screen><computeroutput><![CDATA[$ coffeepot -v -g:examples/prop1.ixml -i:examples/example1.properties -pp
Loading ixml grammar: examples/prop1.ixml
Loading input from examples/example1.properties
There are 2 possible parses.
<property-file xmlns:ixml="http://invisiblexml.org/NS" ixml:state="ambiguous">
   <name-value># This is a comment.</name-value>
   <name-value>name1 : value1</name-value>
   <name-value>name2 = value2</name-value>
</property-file>]]></computeroutput></screen>

<para>That looks reasonable for our initial grammar, but you might
wonder where the ambiguity arises. Let’s find out with the <option>--describe-ambiguity</option>
option:</para>

<screen><computeroutput><![CDATA[$ coffeepot -v -g:examples/prop1.ixml -i:examples/example1.properties --describe-ambiguity -pp
Loading ixml grammar: examples/prop1.ixml
Loading input from examples/example1.properties
There are 2 possible parses.
Ambiguity:
$2, 0, 51
        line, 0, 21 / $3ⁿ, 21, 51
        line, 0, 21 / $3ⁿ, 21, 51
<property-file xmlns:ixml="http://invisiblexml.org/NS" ixml:state="ambiguous">
   <name-value># This is a comment.</name-value>
   <name-value>name1 : value1</name-value>
   <name-value>name2 = value2</name-value>
</property-file>]]></computeroutput></screen>

<para>When you ask <application>coffeepot</application> to describe ambiguity, or when
it fails to parse your document and attempts to report errors, it has little choice
at the moment except to expose some of the inner workings of the parser.
This is described more thoroughly in <xref linkend="how"/>.
</para>

<para>This output indicates that the nonterminal “$2”, covering the range of
characters 0-51 has two different derivations. Sometimes it’s useful to look at the graph
. You can get an SVG version of it with the <option>--graph-svg</option> option:</para>

<figure xml:id="prop1.svg">
<title>Part of the parse forest</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/prop1.png"/>
</imageobject>
</mediaobject>
</figure>

<para>There you can see that the culprit is that a line can be either
a <code>comment</code> or a <code>name-value</code>. Does that seem strange?
Well, look back at our proto-grammar:</para>

<programlisting><![CDATA[comment: s, -["#!"], char*, NL .
name-value: char*, NL .]]></programlisting>

<para>It says that a comment has to begin with a “#” or “!”, so line 1
could be a comment, but all that <code>name-value</code> says at the moment is that
it doesn’t include newlines. So it could also match the first line!
</para>

</section>

<section xml:id="pf002">
<title>Refining name-value</title>

<para>It’s reasonably straight-forward to improve on <code>name-value</code>
in <link xlink:href="examples/prop2.ixml">prop2.ixml</link>:</para>

<programlisting startinglinenumber="6"
  ><xi:include href="examples/prop2.ixml"
               parse="text" fragid="L6-L11"/></programlisting>

<para>Here we’re saying that a <code>name-value</code> is a name, followed
by a “:” or “=” separator, followed by a value; a name is a name start character
followed by zero or more name follower characters, and a value is something
that isn’t whitespace followed by any characters.</para>

<para>This does a good job on our sample file:</para>

<programlisting><![CDATA[$ coffeepot -v -g:examples/prop2.ixml -i:examples/example1.properties -pp
Loading ixml grammar: examples/prop2.ixml
Loading input from examples/example1.properties
<property-file>
   <comment> This is a comment.</comment>
   <name-value>
      <name>name1</name>
      <value>value1</value>
   </name-value>
   <name-value>
      <name>name2</name>
      <value>value2</value>
   </name-value>
</property-file>]]></programlisting>

</section>

<section xml:id="pf003">
<title>More line options</title>

<para>The format for property files is actually a bit more complicated.
They allow blank lines, continuation lines, and several flavors of escaped
characters:</para>

<programlisting
    ><xi:include href="examples/example2.properties"
                 parse="text"/></programlisting>

<para>In fact, the format
<link xlink:href="https://docs.oracle.com/javase/7/docs/api/java/util/Properties.html#load(java.io.Reader)">as described by Java</link> allows even more escaping,
and allows names without values, which we’re not going to try to cover
now. The Java description is a fine example of a messy, procedural
description of a file format. Their parsing description is explicitly
two-pass, though it’s unclear if that’s necessary or if the author was
just describing what their code does.
</para>

<para>Before looking at the solution, have a go at extending the
grammar to support blank lines and continuations. Blank lines are
easy, continuations are a little more complicated.</para>

<mediaobject>
<imageobject>
<imagedata fileref="images/SpoilerBreak.png"/>
</imageobject>
</mediaobject>

<para>Here’s one solution:
in <link xlink:href="examples/prop3.ixml">prop3.ixml</link>:</para>

<programlistingco>
<areaspec>
    <area xml:id="p2l1" coords="1 50"/>
    <area xml:id="p2l3" coords="3 50"/>
    <area xml:id="p2l7" coords="7 50"/>
    <area xml:id="p2l8" coords="8 50"/>
    <area xml:id="p2l9" coords="9 55"/>
    <area xml:id="p2l10" coords="10 50"/>
    <area xml:id="p2l11" coords="11 50"/>
</areaspec>
<programlisting startinglinenumber="2"
  ><xi:include href="examples/prop3.ixml"
               parse="text" fragid="L2-L11"/></programlisting>
<calloutlist>
<callout arearefs="p2l1 p2l3">
<para>A blank line is another kind of line, it consists entirely of whitespace.
</para>
</callout>
<callout arearefs="p2l7">
<para>A <code>name-value</code> no longer includes the newline because
we have address continuations. (If it weren’t for continuations, this grammar
could be written more simply as a series of lines separated by newlines:
<code>property-file: line+#a.</code>.)
</para>
</callout>
<callout arearefs="p2l8">
<para>A value is now either a simple value or an extended value.
</para>
</callout>
<callout arearefs="p2l9">
<para>A simple value is an atomic value followed by a newline.
</para>
</callout>
<callout arearefs="p2l10">
<para>An extended value is an atomic value that ends with a backslash
followed by a newline. That’s followed by whitespace and another value.
This recursive definition assures that if there are several continuations,
we catch them all.
</para>
</callout>
<callout arearefs="p2l11">
<para>Finally, an atomic value is just a non-whitespace characater followed
by more characters. It will always be bounded by the nonterminal that
refers to it.
</para>
</callout>
</calloutlist>
</programlistingco>

<para>Now we get:</para>

<programlisting><![CDATA[$ coffeepot -v -g:examples/prop3.ixml -i:examples/example.properties --describe-ambiguity -pp
Loading ixml grammar: examples/prop3.ixml
Loading input from examples/example.properties
<property-file>
   <comment> This is a comment.</comment>
   <name-value>
      <name>name1</name>
      <value>value1</value>
   </name-value>
   <name-value>
      <name>name2</name>
      <value>value2</value>
   </name-value>
   <name-value>
      <name>name3</name>
      <value>apple,banana,pear</value>
   </name-value>
   <blank/>
   <name-value>
      <name>name4</name>
      <value>a\tb</value>
   </name-value>
   <name-value>
      <name>name5</name>
      <value>a\u2192b </value>
   </name-value>
   <name-value>
      <name>name6</name>
      <value>c:\\path\\to\\thing</value>
   </name-value>
</property-file>]]></programlisting>

<para>Note that “apple”, “banana”, and “pear” have been correctly combined
into a single value. The blank line is explicit, but we could suppress it by
putting “-” before it’s name.</para>

</section>
<section xml:id="pf004">
<title>Character escapes</title>

<para>The last thing we’ll look at are characater escapes. The property file
format says that tab, carriage return, and newline can be escaped as
“\t”, “\r”, and “\n”, respectively. This also requires introducing an escape
for “\”, “\\”. In addition, Java-style Unicode references are allowed:
“\uHHHH” where “HHHH” is any four hexidecimal digits.</para>

<para>As before, you might want to think about this before you look at the
solution.</para>

<mediaobject>
<imageobject>
<imagedata fileref="images/SpoilerBreak.png"/>
</imageobject>
</mediaobject>

<para>The solution
in <link xlink:href="examples/prop4.ixml">prop4.ixml</link> is:</para>

<programlisting startinglinenumber="21"
    ><xi:include href="examples/prop4.ixml"
                 parse="text" fragid="L21-L29"/></programlisting>

<para>We augment <code>char</code> so that it’s a non-backslash character or
a backslash followed by one of “t”, “r”, “n”, or “\”. Or it’s a “\u”
followed by four hexidecimal digits.</para>

<para>Here we encounter an interesting consequence of the design of
Invisible XML version 1.0. Although for the “\\” case, we can suppress
one backslash and output the other, there’s nothing we can do, for
example, to replace “\t” with a literal tab character. Instead,
we leave <code>&lt;tab/&gt;</code>, etc. in the output where they can be
cleaned up later.</para>

<programlisting><![CDATA[$ coffeepot -v -g:examples/prop4.ixml -i:examples/example.properties --describe-ambiguity -pp
Loading ixml grammar: examples/prop4.ixml
Loading input from examples/example.properties
<property-file>
   <comment> This is a comment.</comment>
   <name-value>
      <name>name1</name>
      <value>value1</value>
   </name-value>
   <name-value>
      <name>name2</name>
      <value>value2</value>
   </name-value>
   <name-value>
      <name>name3</name>
      <value>apple,banana,pear</value>
   </name-value>
   <blank/>
   <name-value>
      <name>name4</name>
      <value>a<tab/>b</value>
   </name-value>
   <name-value>
      <name>name5</name>
      <value>a<uref>2192</uref>b </value>
   </name-value>
   <name-value>
      <name>name6</name>
      <value>c:\path\to\thing</value>
   </name-value>
</property-file>]]></programlisting>
</section>

<section xml:id="pf005">
<title>Challenges for the reader</title>

<para>The example grammar in this chapter doesn’t cover all of the
features of property files. If you’re looking for a challenge,
consider these improvements:</para>

<orderedlist>
<listitem>
<para>The property file format also specifies that unnecessarily escaped
characters are allowed, but the escaping is ignored. An occurrence of
<code>\"</code> is the same as <code>"</code>.</para>
</listitem>
<listitem>
<para>The property file format allows “=” and “:” to occur in property names
if they are escaped as <code>\=</code> and <code>\:</code>, respectively.
</para>
</listitem>
<listitem>
<para>In a property file, the “end of file” marks the end of a value. In
the grammar presented in this chapter, a terminating newline is required.
Can this be fixed?</para>
</listitem>
</orderedlist>
</section>
</appendix>
