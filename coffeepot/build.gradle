buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://dev.saxonica.com/maven" }
  }

  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01'
      force "${saxonGroup}:${saxonEdition}:${saxonVersion}"
      force "org.xmlresolver:xmlresolver:${xmlresolverVersion}"
    }
  }

  dependencies {
    classpath group: saxonGroup, name: saxonEdition, version: saxonVersion
    classpath group: 'org.docbook', name: 'schemas-docbook', version: docbookVersion
    classpath group: 'org.docbook', name: 'docbook-xslTNG', version: xslTNGversion
  }
}

plugins {
  id "application"
  id "maven-publish"
  id "signing"
  id 'com.github.gmazzo.buildconfig' version "4.1.2"
  id 'com.nwalsh.gradle.saxon.saxon-gradle' version '0.10.5'
  id 'com.nwalsh.gradle.relaxng.validate' version '0.10.3'
  id 'com.nwalsh.gradle.docker.container' version '0.0.5'
}

import java.text.DateFormat
import java.text.SimpleDateFormat
import com.nwalsh.gradle.saxon.SaxonXsltTask
import com.nwalsh.gradle.relaxng.validate.RelaxNGValidateTask
import com.nwalsh.gradle.docker.DockerContainer

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://dev.saxonica.com/maven" }
}

configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01'
    force "${saxonGroup}:${saxonEdition}:${saxonVersion}"
    force "org.xmlresolver:xmlresolver:${xmlresolverVersion}"
  }
}

if (saxonEdition == "Saxon-EE") {
  configurations.all {
    exclude group: 'net.sf.saxon', module: 'Saxon-HE'
  }
}

configurations {
  transform.extendsFrom documentation
  app.extendsFrom implementation
}

dependencies {
  implementation project(':coffeegrinder')
  implementation project(':coffeefilter')
  implementation project(':coffeesacks')

  implementation (
    [group: 'com.beust', name: 'jcommander', version: '1.81' ],
    [group: 'org.fusesource.jansi', name: 'jansi', version: '2.4.0'],
    [group: saxonGroup, name: saxonEdition, version: saxonVersion],
    fileTree(dir: "${projectDir}/lib", include: '*.jar')
  )
  documentation (
    project(':coffeegrinder'),
    project(':coffeefilter'),
    project(':coffeesacks'),
    [group: 'com.beust', name: 'jcommander', version: '1.81' ],
    [group: 'org.fusesource.jansi', name: 'jansi', version: '2.4.0'],
    [group: saxonGroup, name: saxonEdition, version: saxonVersion],
    [group: 'org.docbook', name: 'schemas-docbook', version: docbookVersion],
    [group: 'org.docbook', name: 'docbook-xslTNG', version: xslTNGversion],
    [group: 'com.saxonica', name: 'xmldoclet', version: xmldocletVersion],
    fileTree(dir: "${projectDir}/lib", include: '*.jar')
  )
}

testing {
  suites {
    test {
      useJUnitJupiter('5.9.2')
    }
  }
}

test {
  testLogging {
    outputs.upToDateWhen { false }
    showStandardStreams = true
  }
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

ext {
  c_coffeepot = "coffeepot"
}

docker_container.configure {
  workingDir = "docker"
}

public String dateTime() {
  TimeZone tz = TimeZone.getTimeZone("UTC");
  DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
  df.setTimeZone(tz);
  return df.format(new Date());
}

public String gitHash() {
  def hashout = new ByteArrayOutputStream()
/*
  exec {
    commandLine "git", "log", "-1", "--format=%h"
    standardOutput = hashout
  }
  return hashout.toString().trim()
*/
  return "SNAPSHOT"
}

// ============================================================

buildConfig {
  packageName('org.nineml.coffeepot')
  buildConfigField('String', 'TITLE', "\"${potTitle}\"")
  buildConfigField('String', 'VERSION', "\"${ninemlVersion}\"")
  buildConfigField('String', 'FILTER_VERSION', "\"${ninemlVersion}\"")
  buildConfigField('String', 'GRINDER_VERSION', "\"${ninemlVersion}\"")
  buildConfigField('String', 'PUB_DATE', "\"${dateTime()}\"")
  buildConfigField('String', 'PUB_HASH', "\"${gitHash()}\"")
}

// ============================================================

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:deprecation'
}

public String jarClasspath() {
  StringBuilder sb = new StringBuilder()
  String fsep = System.getProperty("file.separator")
  sb.append("lib")
  configurations.app.collect { dep ->
    String jar = dep.toString()
    int pos = jar.lastIndexOf(fsep)
    jar = jar.substring(pos)
    sb.append(" ").append("lib").append(jar)
  }
  return sb.toString()
}

jar {
  setDuplicatesStrategy(DuplicatesStrategy.WARN)
  manifest {
    attributes "Project-Name": "${potTitle}"
    attributes 'Built-By': 'Norman Walsh'
    attributes 'Implementation-Vendor': 'Norman Walsh'
    attributes 'Implementation-Title': potTitle
    attributes 'Implementation-Version': ninemlVersion
    attributes "Main-Class": "org.nineml.coffeepot.Main"
    attributes "Class-Path": jarClasspath()
  }
  archiveBaseName = "${potName}-${ninemlVersion}"
}

task copyRuntimeLibraries(
  dependsOn: [':coffeegrinder:jar', ':coffeefilter:jar', ':coffeepot:jar', ':coffeesacks:jar']
) {
  doLast {
    configurations.app.collect { dep ->
      if (!dep.exists()) {
        throw new GradleException("Dependency doesn't exist: ${dep}")
      }
      copy {
        into "${buildDir}/libs/lib"
        from dep
      }
    }
  }
}
jar.finalizedBy(copyRuntimeLibraries)

tasks.register('xmljavadoc', Javadoc) {
  classpath = configurations.transform
  source = sourceSets.main.allJava
  destinationDir = file("${buildDir}/xmldoc")
  options.doclet = 'com.saxonica.xmldoclet.XmlDoclet'
  options.docletpath = configurations.documentation.files.asType(List)
  options.addStringOption("sourcepath", "${projectDir}/src/main/java")
}

task dist(dependsOn: ["jar", "test"]) {
  doLast {
    mkdir "${buildDir}/stage"
    mkdir "${buildDir}/stage/docs"
  }
  doLast {
    copy {
      from "${buildDir}/libs"
      into "${buildDir}/stage"
    }
  }
  doLast {
    copy {
      from "${projectDir}/README.md"
      into "${buildDir}/stage/docs"
    }
  }
}

task zipDist(type: Zip) {
  from "${buildDir}/stage"
  into "${potName}-${ninemlVersion}"
  archiveFileName = "${potName}-${ninemlVersion}.zip"
}
dist.finalizedBy zipDist

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: ['generateBuildConfig']) {
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

// ============================================================

def pomXml() {
  // Do some surgery on the POM dependencies. Remove Saxon-HE and Saxon-EE whatever,
  // add Saxon-HE with the saxonPomVersionList

  return {
    Node pom = asNode()
    NodeList pomNodes = pom.value()
    Node dependencies = null
    pomNodes.forEach { pomit ->
      if (pomit.name().getNamespaceURI() == 'http://maven.apache.org/POM/4.0.0'
          && pomit.name().getLocalPart() == 'dependencies') {
        dependencies = pomit;
      }
    }

    Iterator iterator = dependencies.iterator()
    while (iterator.hasNext()) {
      Node dep = iterator.next()
      NodeList str = dep.get("artifactId")
      if ("Saxon-HE".equals(str.get(0).value().get(0))
          || "Saxon-EE".equals(str.get(0).value().get(0))) {
        iterator.remove()
      }
    }

    def dependencyNode = dependencies.appendNode('dependency')
    dependencyNode.appendNode('groupId', 'net.sf.saxon')
    dependencyNode.appendNode('artifactId', 'Saxon-HE')
    dependencyNode.appendNode('version', saxonPomVersionList)
    dependencyNode.appendNode('scope', 'runtime')
  }
}

signing {
  sign publishing.publications
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = potTitle
        packaging = 'jar'
        description = 'An Invisible XML processor'
        url = 'https://github.com/nineml/coffeepot'

        scm {
          url = 'scm:git@github.com:nineml/coffeepot.git'
          connection = 'scm:git@github.com:nineml/coffeepot.git'
          developerConnection = 'scm:git@github.com:nineml/coffeepot.git'
        }

        licenses {
          license {
            name = 'Mozilla Public License Version 2.0'
            url = 'http://www.mozilla.org/MPL/2.0/'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'ndw'
            name = 'Norman Walsh'
          }
        }

        withXml pomXml()
      }

      groupId = "org.nineml"
      artifactId = potName
      version = ninemlVersion
      from components.java
      artifact javadocJar
      artifact sourcesJar
    }
  }

  repositories {
    maven {
      url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        username = project.findProperty("sonatypeUsername") ?: "NOUSER"
        password = project.findProperty("sonatypePassword") ?: "NOPASS"
      }
    }
  }
}

// ======================================================================

task dockerup() {
  doLast {
    if (!DockerContainer.running(c_coffeepot)) {
      DockerContainer.compose {
        command = "up"
        options = ["-p", "coffeepot"]
        args = ["-d"]
      }
    }
  }
}

task dockerdown() {
  doLast {
    if (DockerContainer.running(c_coffeepot)) {
      DockerContainer.compose {
        command = "down"
        options = ["-p", "coffeepot"]
      }
    }
  }
}

// ============================================================

task helloWorld() {
  doLast {
    println('Hello, world.')
  }
}
